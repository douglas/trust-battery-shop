{"version":3,"file":"static/webpack/static/development/pages/index.js.c0a2e05daa74234a3370.hot-update.js","sources":["webpack:///./components/LevelThermometer.js","webpack:///./components/NightingaleChart.js","webpack:///./components/PointSummaries.js","webpack:///./components/SnowflakeApp.js","webpack:///./components/TitleSelector.js","webpack:///./components/Track.js","webpack:///./components/TrackSelector.js","webpack:///./constants/constants.js"],"sourcesContent":["// @flow\n\nimport * as d3 from 'd3'\nimport { pointsToLevels, categoryPointsFromMilestoneMap, categoryColorScale, categoryIds } from '../constants/constants'\nimport React from 'react'\nimport type { MilestoneMap } from '../constants'\n\nconst margins = {\n  top: 30,\n  right: 20,\n  bottom: 30,\n  left: 10\n}\nconst height = 150\nconst width = 550\n\ntype Props = {\n  milestoneByTrack: MilestoneMap,\n}\n\nclass LevelThermometer extends React.Component<Props> {\n  pointScale: any\n  topAxisFn: any\n  bottomAxisFn: any\n  topAxis: *\n  bottomAxis: *\n\n  constructor(props: *) {\n    super(props)\n\n    this.pointScale = d3.scaleLinear()\n      .domain([0, 135])\n      .rangeRound([0, width - margins.left - margins.right]);\n\n    this.topAxisFn = d3.axisTop()\n      .scale(this.pointScale)\n      .tickValues(Object.keys(pointsToLevels))\n      .tickFormat(points => pointsToLevels[points])\n\n    this.bottomAxisFn = d3.axisBottom()\n      .scale(this.pointScale)\n      .tickValues(Object.keys(pointsToLevels))\n  }\n\n  componentDidMount() {\n    d3.select(this.topAxis).call(this.topAxisFn)\n      .selectAll('text')\n      .attr(\"y\", 0)\n      .attr(\"x\", -25)\n      .attr(\"transform\", \"rotate(90)\")\n      .attr(\"dy\", \".35em\")\n      .style('font-size', '12px')\n      .style('text-anchor', 'start')\n    d3.select(this.bottomAxis).call(this.bottomAxisFn)\n      .selectAll('text')\n      .attr(\"y\", 0)\n      .attr(\"x\", 10)\n      .attr(\"transform\", \"rotate(90)\")\n      .attr(\"dy\", \".35em\")\n      .style('font-size', '12px')\n      .style('text-anchor', 'start')\n  }\n\n  rightRoundedRect(x: *, y: *, width: *, height: *, radius: *) {\n    return \"M\" + x + \",\" + y\n         + \"h\" + (width - radius)\n         + \"a\" + radius + \",\" + radius + \" 0 0 1 \" + radius + \",\" + radius\n         + \"v\" + (height - 2 * radius)\n         + \"a\" + radius + \",\" + radius + \" 0 0 1 \" + -radius + \",\" + radius\n         + \"h\" + (radius - width)\n         + \"z\";\n  }\n  render() {\n    let categoryPoints = categoryPointsFromMilestoneMap(this.props.milestoneByTrack)\n    let lastCategoryIndex = 0\n    categoryPoints.forEach((categoryPoint, i) => {\n      if (categoryPoint.points) lastCategoryIndex = i\n    })\n    let cumulativePoints = 0\n    return (\n      <figure>\n        <style jsx>{`\n          figure {\n            margin: 0 0 0 -10px;\n          }\n          svg {\n            width: ${width}px;\n            height: ${height + 10}px;\n          }\n        `}</style>\n        <svg>\n          <g transform={`translate(${margins.left},${margins.top})`}>\n            {categoryPoints.map((categoryPoint, i) => {\n              const x = this.pointScale(cumulativePoints)\n              const width = this.pointScale(cumulativePoints + categoryPoint.points) - x\n              cumulativePoints += categoryPoint.points\n              return (i != lastCategoryIndex ?\n                <rect\n                    key={categoryPoint.categoryId}\n                    x={x}\n                    y={0}\n                    width={width}\n                    height={height - margins.top - margins.bottom}\n                    style={{fill: categoryColorScale(categoryPoint.categoryId), borderRight: \"1px solid #000\"}}\n                    /> :\n                <path\n                    key={categoryPoint.categoryId}\n                    d={this.rightRoundedRect(x, 0, width, height - margins.top - margins.bottom, 3)}\n                    style={{fill: categoryColorScale(categoryPoint.categoryId)}}\n                    />\n              )\n            })}\n            <g ref={ref => this.topAxis = ref} className=\"top-axis\"\n                transform={`translate(0, -2)`}\n                />\n            <g ref={ref => this.bottomAxis = ref} className=\"bottom-axis\"\n                transform={`translate(0,${height - margins.top - margins.bottom + 1})`}\n                />\n          </g>\n        </svg>\n      </figure>\n    )\n  }\n}\n\nexport default LevelThermometer\n","// @flow\n\nimport React from 'react'\nimport * as d3 from 'd3'\nimport { scores, categoryColorScale } from '../constants/constants'\nimport type { Milestone, MilestoneMap } from '../constants'\nimport { trackIds, tracks } from '../constants/tracks'\nimport type { TrackId } from '../constants/tracks'\n\nconst width = 400\nconst arcMilestones = scores.slice(1) // we'll draw the '0' milestone with a circle, not an arc.\n\ntype Props = {\n  milestoneByTrack: MilestoneMap,\n  focusedTrackId: TrackId,\n  handleTrackMilestoneChangeFn: (TrackId, Milestone) => void\n}\n\nclass NightingaleChart extends React.Component<Props> {\n  colorScale: any\n  radiusScale: any\n  arcFn: any\n\n  constructor(props: *) {\n    super(props)\n\n    this.colorScale = d3.scaleSequential(d3.interpolateWarm)\n      .domain([0, 5])\n\n    this.radiusScale = d3.scaleBand()\n      .domain(arcMilestones)\n      .range([.15 * width, .45 * width])\n      .paddingInner(0.1)\n\n    this.arcFn = d3.arc()\n      .innerRadius(milestone => this.radiusScale(milestone))\n      .outerRadius(milestone => this.radiusScale(milestone) + this.radiusScale.bandwidth())\n      .startAngle(- Math.PI / trackIds.length)\n      .endAngle(Math.PI / trackIds.length)\n      .padAngle(Math.PI / 200)\n      .padRadius(.45 * width)\n      .cornerRadius(2)\n  }\n\n  render() {\n    const currentMilestoneId = this.props.milestoneByTrack[this.props.focusedTrackId]\n    return (\n      <figure>\n        <style jsx>{`\n          figure {\n            margin: 0;\n          }\n          svg {\n            width: ${width}px;\n            height: ${width}px;\n          }\n          .track-milestone {\n            fill: #eee;\n            cursor: pointer;\n          }\n          .track-milestone-current, .track-milestone:hover {\n            stroke: #000;\n            stroke-width: 4px;\n            stroke-linejoin: round;\n          }\n        `}</style>\n        <svg>\n          <g transform={`translate(${width/2},${width/2}) rotate(-33.75)`}>\n            {trackIds.map((trackId, i) => {\n              const isCurrentTrack = trackId == this.props.focusedTrackId\n              return (\n                <g key={trackId} transform={`rotate(${i * 360 / trackIds.length})`}>\n                  {arcMilestones.map((milestone) => {\n                    const isCurrentMilestone = isCurrentTrack && milestone == currentMilestoneId\n                    const isMet = this.props.milestoneByTrack[trackId] >= milestone || milestone == 0\n                    return (\n                      <path\n                          key={milestone}\n                          className={'track-milestone ' + (isMet ? 'is-met ' : ' ') + (isCurrentMilestone ? 'track-milestone-current' : '')}\n                          onClick={() => this.props.handleTrackMilestoneChangeFn(trackId, milestone)}\n                          d={this.arcFn(milestone)}\n                          style={{fill: isMet ? categoryColorScale(tracks[trackId].category) : undefined}} />\n                    )\n                  })}\n                  <circle\n                      r=\"8\"\n                      cx=\"0\"\n                      cy=\"-50\"\n                      style={{fill: categoryColorScale(tracks[trackId].category)}}\n                      className={\"track-milestone \" + (isCurrentTrack && !currentMilestoneId ? \"track-milestone-current\" : \"\")}\n                      onClick={() => this.props.handleTrackMilestoneChangeFn(trackId, 0)} />\n                </g>\n            )})}\n          </g>\n        </svg>\n      </figure>\n    )\n  }\n}\n\nexport default NightingaleChart\n","// @flow\n\nimport { pointsToLevels, trackIds, totalPointsFromMilestoneMap } from '../constants/constants'\nimport type { MilestoneMap } from '../constants'\nimport React from 'react'\n\ntype Props = {\n  milestoneByTrack: MilestoneMap\n}\n\nclass PointSummaries extends React.Component<Props> {\n  render() {\n    const totalPoints = totalPointsFromMilestoneMap(this.props.milestoneByTrack)\n\n    let currentLevel, nextLevel\n\n    let pointsForCurrentLevel = totalPoints\n    while (!(currentLevel = pointsToLevels[pointsForCurrentLevel])) {\n      pointsForCurrentLevel--\n    }\n\n    let pointsToNextLevel = 1\n    while (!(nextLevel = pointsToLevels[totalPoints + pointsToNextLevel])) {\n      pointsToNextLevel++\n      if (pointsToNextLevel > 135) {\n        pointsToNextLevel = 'N/A'\n        break\n      }\n    }\n\n    const blocks = [\n      {\n        label: 'Current level',\n        value: currentLevel\n      },\n      {\n        label: 'Total points',\n        value: totalPoints\n      },\n      {\n        label: 'Points to next level',\n        value: pointsToNextLevel\n      }\n    ]\n\n    return (\n      <table>\n        <style jsx>{`\n          table {\n            border-spacing: 3px;\n            margin-bottom: 20px;\n            margin-left: -3px;\n          }\n          .point-summary-label {\n            font-size: 12px;\n            text-align: center;\n            font-weight: normal;\n            width: 120px;\n          }\n          .point-summary-value {\n            width: 120px;\n            background: #eee;\n            font-size: 24px;\n            font-weight: bold;\n            line-height: 50px;\n            border-radius: 2px;\n            text-align: center;\n          }\n        `}</style>\n        <tbody>\n          <tr>\n          {blocks.map(({label}, i) => (\n            <th key={i} className=\"point-summary-label\">\n              {label}\n            </th>\n          ))}\n          </tr>\n          <tr>\n          {blocks.map(({value}, i) => (\n            <td key={i} className=\"point-summary-value\">\n              {value}\n            </td>\n          ))}\n          </tr>\n        </tbody>\n      </table>\n    )\n  }\n}\n\nexport default PointSummaries\n","// @flow\n\nimport TrackSelector from '../components/TrackSelector'\nimport NightingaleChart from '../components/NightingaleChart'\nimport KeyboardListener from '../components/KeyboardListener'\nimport Track from '../components/Track'\nimport Footer from '../components/Footer'\nimport Wordmark from '../components/Wordmark'\nimport LevelThermometer from '../components/LevelThermometer'\nimport { eligibleTitles, milestones } from '../constants/constants'\nimport { trackIds, tracks } from '../constants/tracks'\nimport PointSummaries from '../components/PointSummaries'\nimport type { Milestone, MilestoneMap, TrackId } from '../constants'\nimport React from 'react'\nimport TitleSelector from '../components/TitleSelector'\n\ntype SnowflakeAppState = {\n  milestoneByTrack: MilestoneMap,\n  name: string,\n  title: string,\n  focusedTrackId: TrackId,\n}\n\nconst hashToState = (hash: String): ?SnowflakeAppState => {\n  if (!hash) return null\n  const result = defaultState()\n  const hashValues = hash.split('#')[1].split(',')\n  if (!hashValues) return null\n  trackIds.forEach((trackId, i) => {\n    result.milestoneByTrack[trackId] = coerceMilestone(Number(hashValues[i]))\n  })\n  if (hashValues[16]) result.name = decodeURI(hashValues[16])\n  if (hashValues[17]) result.title = decodeURI(hashValues[17])\n  return result\n}\n\nconst coerceMilestone = (value: number): Milestone => {\n  // HACK I know this is goofy but i'm dealing with flow typing\n  switch(value) {\n    case 0: return 0\n    case 1: return 1\n    case 2: return 2\n    case 3: return 3\n    case 4: return 4\n    case 5: return 5\n    default: return 0\n  }\n}\n\nconst emptyState = (): SnowflakeAppState => {\n  return {\n    name: '',\n    title: '',\n    milestoneByTrack: {\n      'MOBILE': 0,\n      'WEB_CLIENT': 0,\n      'FOUNDATIONS': 0,\n      'SERVERS': 0,\n      'PROJECT_MANAGEMENT': 0,\n      'COMMUNICATION': 0,\n      'CRAFT': 0,\n      'INITIATIVE': 0,\n      'CAREER_DEVELOPMENT': 0,\n      'ORG_DESIGN': 0,\n      'WELLBEING': 0,\n      'ACCOMPLISHMENT': 0,\n      'MENTORSHIP': 0,\n      'EVANGELISM': 0,\n      'RECRUITING': 0,\n      'COMMUNITY': 0\n    },\n    focusedTrackId: 'MOBILE'\n  }\n}\n\nconst defaultState = (): SnowflakeAppState => {\n  return {\n    name: 'Cersei Lannister',\n    title: 'Staff Engineer',\n    milestoneByTrack: {\n      'MOBILE': 1,\n      'WEB_CLIENT': 2,\n      'FOUNDATIONS': 3,\n      'SERVERS': 2,\n      'PROJECT_MANAGEMENT': 4,\n      'COMMUNICATION': 1,\n      'CRAFT': 1,\n      'INITIATIVE': 4,\n      'CAREER_DEVELOPMENT': 3,\n      'ORG_DESIGN': 2,\n      'WELLBEING': 0,\n      'ACCOMPLISHMENT': 4,\n      'MENTORSHIP': 2,\n      'EVANGELISM': 2,\n      'RECRUITING': 3,\n      'COMMUNITY': 0\n    },\n    focusedTrackId: 'MOBILE'\n  }\n}\n\nconst stateToHash = (state: SnowflakeAppState) => {\n  if (!state || !state.milestoneByTrack) return null\n  const values = trackIds.map(trackId => state.milestoneByTrack[trackId]).concat(encodeURI(state.name), encodeURI(state.title))\n  return values.join(',')\n}\n\ntype Props = {}\n\nclass SnowflakeApp extends React.Component<Props, SnowflakeAppState> {\n  constructor(props: Props) {\n    super(props)\n    this.state = emptyState()\n  }\n\n  componentDidUpdate() {\n    const hash = stateToHash(this.state)\n    if (hash) window.location.replace(`#${hash}`)\n  }\n\n  componentDidMount() {\n    const state = hashToState(window.location.hash)\n    if (state) {\n      this.setState(state)\n    } else {\n      this.setState(defaultState())\n    }\n  }\n\n  render() {\n    return (\n      <main>\n        <style jsx global>{`\n          body {\n            font-family: Helvetica;\n          }\n          main {\n            width: 960px;\n            margin: 0 auto;\n          }\n          .name-input {\n            border: none;\n            display: block;\n            border-bottom: 2px solid #fff;\n            font-size: 30px;\n            line-height: 40px;\n            font-weight: bold;\n            width: 380px;\n            margin-bottom: 10px;\n          }\n          .name-input:hover, .name-input:focus {\n            border-bottom: 2px solid #ccc;\n            outline: 0;\n          }\n          a {\n            color: #888;\n            text-decoration: none;\n          }\n        `}</style>\n        <div style={{margin: '19px auto 0', width: 142}}>\n          <a href=\"https://www.shopify.com\" target=\"_blank\">\n            <Wordmark />\n          </a>\n        </div>\n        <div style={{display: 'flex'}}>\n          <div style={{flex: 1}}>\n            <form>\n              {/* <input\n                  type=\"text\"\n                  className=\"name-input\"\n                  value={this.state.name}\n                  onChange={e => this.setState({name: e.target.value})}\n                  placeholder=\"Name\"\n                  /> */}\n              <TitleSelector\n                  milestoneByTrack={this.state.milestoneByTrack}\n                  currentTitle={this.state.title}\n                  setTitleFn={(title) => this.setTitle(title)} />\n            </form>\n            <PointSummaries milestoneByTrack={this.state.milestoneByTrack} />\n            <LevelThermometer milestoneByTrack={this.state.milestoneByTrack} />\n          </div>\n          <div style={{flex: 0}}>\n            <NightingaleChart\n                milestoneByTrack={this.state.milestoneByTrack}\n                focusedTrackId={this.state.focusedTrackId}\n                handleTrackMilestoneChangeFn={(track, milestone) => this.handleTrackMilestoneChange(track, milestone)} />\n          </div>\n        </div>\n        <TrackSelector\n            milestoneByTrack={this.state.milestoneByTrack}\n            focusedTrackId={this.state.focusedTrackId}\n            setFocusedTrackIdFn={this.setFocusedTrackId.bind(this)} />\n        <KeyboardListener\n            selectNextTrackFn={this.shiftFocusedTrack.bind(this, 1)}\n            selectPrevTrackFn={this.shiftFocusedTrack.bind(this, -1)}\n            increaseFocusedMilestoneFn={this.shiftFocusedTrackMilestoneByDelta.bind(this, 1)}\n            decreaseFocusedMilestoneFn={this.shiftFocusedTrackMilestoneByDelta.bind(this, -1)} />\n        <Track\n            milestoneByTrack={this.state.milestoneByTrack}\n            trackId={this.state.focusedTrackId}\n            handleTrackMilestoneChangeFn={(track, milestone) => this.handleTrackMilestoneChange(track, milestone)} />\n        <Footer />\n      </main>\n    )\n  }\n\n  handleTrackMilestoneChange(trackId: TrackId, milestone: Milestone) {\n    const milestoneByTrack = this.state.milestoneByTrack\n    milestoneByTrack[trackId] = milestone\n\n    const titles = eligibleTitles(milestoneByTrack)\n    const title = titles.indexOf(this.state.title) === -1 ? titles[0] : this.state.title\n\n    this.setState({ milestoneByTrack, focusedTrackId: trackId, title })\n  }\n\n  shiftFocusedTrack(delta: number) {\n    let index = trackIds.indexOf(this.state.focusedTrackId)\n    index = (index + delta + trackIds.length) % trackIds.length\n    const focusedTrackId = trackIds[index]\n    this.setState({ focusedTrackId })\n  }\n\n  setFocusedTrackId(trackId: TrackId) {\n    let index = trackIds.indexOf(trackId)\n    const focusedTrackId = trackIds[index]\n    this.setState({ focusedTrackId })\n  }\n\n  shiftFocusedTrackMilestoneByDelta(delta: number) {\n    let prevMilestone = this.state.milestoneByTrack[this.state.focusedTrackId]\n    let milestone = prevMilestone + delta\n    if (milestone < 0) milestone = 0\n    if (milestone > 5) milestone = 5\n    this.handleTrackMilestoneChange(this.state.focusedTrackId, ((milestone: any): Milestone))\n  }\n\n  setTitle(title: string) {\n    let titles = eligibleTitles(this.state.milestoneByTrack)\n    title = titles.indexOf(title) == -1 ? titles[0] : title\n    this.setState({ title })\n  }\n}\n\nexport default SnowflakeApp\n","// @flow\n\nimport React from 'react'\nimport { eligibleTitles } from '../constants/constants'\nimport type { MilestoneMap } from '../constants'\n\ntype Props = {\n  milestoneByTrack: MilestoneMap,\n  currentTitle: string,\n  setTitleFn: (string) => void\n}\n\nclass TitleSelector extends React.Component<Props> {\n  render() {\n    const titles = eligibleTitles(this.props.milestoneByTrack)\n    return <select value={this.props.currentTitle} onChange={e => this.props.setTitleFn(e.target.value)}>\n      <style jsx>{`\n        select {\n          font-size: 20px;\n          line-height: 20px;\n          margin-bottom: 20px;\n          min-width: 300px;\n        }\n      `}</style>\n      {titles.map(title => (\n        <option key={title}>\n          {title}\n        </option>\n      ))}\n    </select>\n  }\n}\n\nexport default TitleSelector\n","// @flow\n\nimport { scores, categoryColorScale } from '../constants/constants'\nimport { tracks } from '../constants/tracks'\nimport React from 'react'\nimport type { MilestoneMap, Milestone } from '../constants'\nimport type { TrackId } from '../constants/tracks'\n\ntype Props = {\n  milestoneByTrack: MilestoneMap,\n  trackId: TrackId,\n  handleTrackMilestoneChangeFn: (TrackId, Milestone) => void\n}\n\nclass Track extends React.Component<Props> {\n  render() {\n    const track = tracks[this.props.trackId]\n    const currentMilestoneId = this.props.milestoneByTrack[this.props.trackId]\n    const currentMilestone = track.milestones[currentMilestoneId - 1]\n    return (\n      <div className=\"track\">\n        <style jsx>{`\n          div.track {\n            margin: 0 0 20px 0;\n            padding-bottom: 20px;\n            border-bottom: 2px solid #ccc;\n          }\n          h2 {\n            margin: 0 0 10px 0;\n          }\n          p.track-description {\n            margin-top: 0;\n            padding-bottom: 20px;\n            border-bottom: 2px solid #ccc;\n          }\n          table {\n            border-spacing: 3px;\n          }\n          td {\n            line-height: 50px;\n            width: 50px;\n            text-align: center;\n            background: #eee;\n            font-weight: bold;\n            font-size: 24px;\n            border-radius: 3px;\n            cursor: pointer;\n          }\n          ul {\n            line-height: 1.5em;\n          }\n        `}</style>\n        <h2>{track.displayName}</h2>\n        <p className=\"track-description\">{track.description}</p>\n        <div style={{display: 'flex'}}>\n          <table style={{flex: 0, marginRight: 50}}>\n            <tbody>\n              {scores.slice().reverse().map((milestone) => {\n                const isMet = milestone <= currentMilestoneId\n                return (\n                  <tr key={milestone}>\n                    <td onClick={() => this.props.handleTrackMilestoneChangeFn(this.props.trackId, milestone)}\n                        style={{border: `4px solid ${milestone === currentMilestoneId ? '#000' : isMet ? categoryColorScale(track.category) : '#eee'}`, background: isMet ? categoryColorScale(track.category) : undefined}}>\n                      {milestone}\n                    </td>\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n          {currentMilestone ? (\n            <div style={{flex: 1}}>\n              <h3>{currentMilestone.summary}</h3>\n              <h4>Example behaviors:</h4>\n              <ul>\n                {currentMilestone.signals.map((signal, i) => (\n                  <li key={i}>{signal}</li>\n                ))}\n              </ul>\n              <h4>Example tasks:</h4>\n              <ul>\n                {currentMilestone.examples.map((example, i) => (\n                  <li key={i}>{example}</li>\n                ))}\n              </ul>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Track\n","// @flow\n\nimport React from 'react'\nimport { categoryColorScale } from '../constants/constants'\nimport { trackIds, tracks } from '../constants/tracks'\nimport type { MilestoneMap, TrackId } from '../constants'\n\ntype Props = {\n  milestoneByTrack: MilestoneMap,\n  focusedTrackId: TrackId,\n  setFocusedTrackIdFn: (TrackId) => void\n}\n\nclass TrackSelector extends React.Component<Props> {\n  render() {\n    return (\n      <table>\n        <style jsx>{`\n          table {\n            width: 100%;\n            border-spacing: 3px;\n            border-bottom: 2px solid #ccc;\n            padding-bottom: 20px;\n            margin-bottom: 20px;\n            margin-left: -3px;\n          }\n          .track-selector-value {\n            line-height: 50px;\n            width: 50px;\n            text-align: center;\n            background: #eee;\n            font-weight: bold;\n            font-size: 24px;\n            border-radius: 3px;\n            cursor: pointer;\n          }\n          .track-selector-label {\n            text-align: center;\n            font-size: 9px;\n          }\n        `}</style>\n        <tbody>\n          <tr>\n            {trackIds.map(trackId => (\n              <td key={trackId} className=\"track-selector-label\" onClick={() => this.props.setFocusedTrackIdFn(trackId)}>\n                {tracks[trackId].displayName}\n              </td>\n            ))}\n          </tr>\n          <tr>\n            {trackIds.map(trackId => (\n              <td key={trackId} className=\"track-selector-value\"\n                  style={{border: '4px solid ' + (trackId == this.props.focusedTrackId ? '#000': categoryColorScale(tracks[trackId].category)), background: categoryColorScale(tracks[trackId].category)}}\n                  onClick={() => this.props.setFocusedTrackIdFn(trackId)}>\n                {this.props.milestoneByTrack[trackId]}\n              </td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n    )\n  }\n}\n\nexport default TrackSelector\n","// @flow\nimport * as d3 from 'd3'\nimport { tracks } from '../constants/tracks'\nimport type { TrackId } from '../constants/tracks'\n\nexport type Score = 0 | 1 | 2 | 3 | 4\nexport const scores = [0, 1, 2, 3, 4]\n\nexport type MilestoneMap = {\n  'MOBILE': Milestone,\n  'WEB_CLIENT': Milestone,\n  'FOUNDATIONS': Milestone,\n  'SERVERS': Milestone,\n  'PROJECT_MANAGEMENT': Milestone,\n  'COMMUNICATION': Milestone,\n  'CRAFT': Milestone,\n  'INITIATIVE': Milestone,\n  'CAREER_DEVELOPMENT': Milestone,\n  'ORG_DESIGN': Milestone,\n  'WELLBEING': Milestone,\n  'ACCOMPLISHMENT': Milestone,\n  'MENTORSHIP': Milestone,\n  'EVANGELISM': Milestone,\n  'RECRUITING': Milestone,\n  'COMMUNITY': Milestone\n}\n\nexport type Milestone = {\n  level: Number,\n  description: string,\n  points: Number\n}\n\ntype Milestones = {|\n  0: Milestone,\n  1: Milestone,\n  2: Milestone,\n  3: Milestone,\n  4: Milestone\n|}\n\nexport const milestones: Milestones = {\n  0: { level: 0, description: 'Never', points: 0 },\n  1: { level: 1, description: 'Rarely', points: 1 },\n  2: { level: 2, description: 'Sometimes', points: 3 },\n  3: { level: 3, description: 'Often', points: 6 },\n  4: { level: 4, description: 'Always', points: 12 }\n}\n\nexport const pointsToLevels = {\n  '0': '1.1',\n  '5': '1.2',\n  '11': '1.3',\n  '17': '2.1',\n  '23': '2.2',\n  '29': '2.3',\n  '36': '3.1',\n  '43': '3.2',\n  '50': '3.3',\n  '58': '4.1',\n  '66': '4.2',\n  '74': '4.3',\n  '90': '5.1',\n  '110': '5.2',\n  '135': '5.3',\n}\n\nexport const maxLevel = 135\n\n\n\nexport const categoryIds: Set<string> = trackIds.reduce((set, trackId) => {\n  set.add(tracks[trackId].category)\n  return set\n}, new Set())\n\nexport const categoryPointsFromMilestoneMap = (milestoneMap: MilestoneMap) => {\n  let pointsByCategory = new Map()\n  trackIds.forEach((trackId) => {\n    const milestone = milestoneMap[trackId]\n    const categoryId = tracks[trackId].category\n    let currentPoints = pointsByCategory.get(categoryId) || 0\n    pointsByCategory.set(categoryId, currentPoints + milestones[milestone].points)\n  })\n  return Array.from(categoryIds.values()).map(categoryId => {\n    const points = pointsByCategory.get(categoryId)\n    return { categoryId, points: pointsByCategory.get(categoryId) || 0 }\n  })\n}\n\nexport const totalPointsFromMilestoneMap = (milestoneMap: MilestoneMap): number =>\n  trackIds.map(trackId => milestones[milestoneMap[trackId]].points).reduce((sum, addend) => (sum + addend), 0)\n\nexport const categoryColorScale = d3.scaleOrdinal()\n  .domain(categoryIds)\n  .range(['#47C1BF', '#006FBB', '#EEC200', '#F49342'])\n\nexport const titles = [\n  {label: 'Engineer I', minPoints: 0, maxPoints: 16},\n  {label: 'Engineer II', minPoints: 17, maxPoints: 35},\n  {label: 'Senior Engineer', minPoints: 36, maxPoints: 57},\n  {label: 'Group Lead', minPoints: 36, maxPoints: 57},\n  {label: 'Staff Engineer', minPoints: 58, maxPoints: 89},\n  {label: 'Senior Group Lead', minPoints: 58, maxPoints: 89},\n  {label: 'Principal Engineer', minPoints: 90},\n  {label: 'Director of Engineering', minPoints: 90}\n]\n\nexport const eligibleTitles = (milestoneMap: MilestoneMap): string[] => {\n  const totalPoints = totalPointsFromMilestoneMap(milestoneMap)\n\n  return titles.filter(title => (title.minPoints === undefined || totalPoints >= title.minPoints)\n                             && (title.maxPoints === undefined || totalPoints <= title.maxPoints))\n    .map(title => title.label)\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAKA;;;;;AAOA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAIA;AAGA;AAAA;AAEA;AAZA;AAetGA;AACA;AAwGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3HA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAOA;;;;;AAKA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAGA;AAKA;AACA;AAAA;AACA;AAAA;AAbA;AAmBA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAKA;;;;AA/EA;AACA;AAiFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClGA;AAEA;AACA;AAKA;;;;;;;;;;;;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AASA;;;;AA7EA;AACA;AA+EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;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","sourceRoot":""}