{"version":3,"file":"static/webpack/static/development/pages/index.js.f1824e3602ad43429ba7.hot-update.js","sources":["webpack:///./components/SnowflakeApp.js","webpack:///./constants/constants.js"],"sourcesContent":["// @flow\n\nimport TrackSelector from '../components/TrackSelector'\nimport NightingaleChart from '../components/NightingaleChart'\nimport KeyboardListener from '../components/KeyboardListener'\nimport Track from '../components/Track'\nimport Footer from '../components/Footer'\nimport Wordmark from '../components/Wordmark'\nimport LevelThermometer from '../components/LevelThermometer'\nimport { milestones } from '../constants/constants'\nimport { trackIds, tracks } from '../constants/tracks'\nimport PointSummaries from '../components/PointSummaries'\nimport type { Milestone, MilestoneMap, TrackId } from '../constants/constants'\nimport React from 'react'\n\ntype SnowflakeAppState = {\n  milestoneByTrack: MilestoneMap,\n  name: string,\n  title: string,\n  focusedTrackId: TrackId,\n}\n\nconst hashToState = (hash: String): ?SnowflakeAppState => {\n  if (!hash) return null\n  const result = defaultState()\n  const hashValues = hash.split('#')[1].split(',')\n  if (!hashValues) return null\n  trackIds.forEach((trackId, i) => {\n    result.milestoneByTrack[trackId] = coerceMilestone(Number(hashValues[i]))\n  })\n  return result\n}\n\nconst coerceMilestone = (value: number): Milestone => {\n  // HACK I know this is goofy but i'm dealing with flow typing\n  switch(value) {\n    case 0: return 0\n    case 1: return 1\n    case 2: return 2\n    case 3: return 3\n    case 4: return 4\n    case 5: return 5\n    default: return 0\n  }\n}\n\nconst emptyState = (): SnowflakeAppState => {\n  return {\n    name: '',\n    title: '',\n    milestoneByTrack: {\n      'KEEP_PROMISES': 0,\n      'MEET_DEADLINES': 0,\n      'ON_TIME': 0,\n      'DEPENDABLE': 0,\n      'CONTENT_EXPERTISE': 0,\n      'PASSION': 0,\n      'CHALLENGE_CUSTOMERS': 0,\n      'HUMILITY': 0,\n      'ACCEPTANCE': 0,\n      'OPENNESS': 0,\n      'EMOTIONAL_HONESTY': 0,\n      'AUTHENTICITY': 0,\n      'FOCUSSING_ON_OTHERS': 0,\n      'LISTENING': 0,\n      'COMPASSION': 0,\n      'COLLABORATION': 0\n    },\n    focusedTrackId: 'KEEP_PROMISES'\n  }\n}\n\nconst defaultState = (): SnowflakeAppState => {\n  return {\n    name: 'Cersei Lannister',\n    title: 'Staff Engineer',\n    milestoneByTrack: {\n      'KEEP_PROMISES': 2,\n      'MEET_DEADLINES': 3,\n      'ON_TIME': 3,\n      'DEPENDABLE': 3,\n      'CONTENT_EXPERTISE': 4,\n      'PASSION': 4,\n      'CHALLENGE_CUSTOMERS': 3,\n      'HUMILITY': 2,\n      'ACCEPTANCE': 1,\n      'OPENNESS': 4,\n      'EMOTIONAL_HONESTY': 2,\n      'AUTHENTICITY': 4,\n      'FOCUSSING_ON_OTHERS': 2,\n      'LISTENING': 2,\n      'COMPASSION': 3,\n      'COLLABORATION': 3\n    },\n    focusedTrackId: 'KEEP_PROMISES'\n  }\n}\n\nconst stateToHash = (state: SnowflakeAppState) => {\n  if (!state || !state.milestoneByTrack) return null\n  const values = trackIds.map(trackId => state.milestoneByTrack[trackId])\n  return values.join(',')\n}\n\ntype Props = {}\n\nclass SnowflakeApp extends React.Component<Props, SnowflakeAppState> {\n  constructor(props: Props) {\n    super(props)\n    this.state = emptyState()\n  }\n\n  componentDidUpdate() {\n    const hash = stateToHash(this.state)\n    if (hash) window.location.replace(`#${hash}`)\n  }\n\n  componentDidMount() {\n    const state = hashToState(window.location.hash)\n    if (state) {\n      this.setState(state)\n    } else {\n      this.setState(defaultState())\n    }\n  }\n\n  render() {\n    return (\n      <main>\n        <style jsx global>{`\n          body {\n            font-family: Helvetica;\n          }\n          main {\n            width: 960px;\n            margin: 0 auto;\n          }\n          .name-input {\n            border: none;\n            display: block;\n            border-bottom: 2px solid #fff;\n            font-size: 30px;\n            line-height: 40px;\n            font-weight: bold;\n            width: 380px;\n            margin-bottom: 10px;\n          }\n          .name-input:hover, .name-input:focus {\n            border-bottom: 2px solid #ccc;\n            outline: 0;\n          }\n          a {\n            color: #888;\n            text-decoration: none;\n          }\n        `}</style>\n        <div style={{margin: '19px auto 0', width: 142}}>\n          <a href=\"https://www.shopify.com\" target=\"_blank\">\n            <Wordmark />\n          </a>\n        </div>\n        <div style={{display: 'flex'}}>\n          <div style={{flex: 1}}>\n            <PointSummaries milestoneByTrack={this.state.milestoneByTrack} />\n            <LevelThermometer milestoneByTrack={this.state.milestoneByTrack} />\n          </div>\n          <div style={{flex: 0}}>\n            <NightingaleChart\n                milestoneByTrack={this.state.milestoneByTrack}\n                focusedTrackId={this.state.focusedTrackId}\n                handleTrackMilestoneChangeFn={(track, milestone) => this.handleTrackMilestoneChange(track, milestone)} />\n          </div>\n        </div>\n        <TrackSelector\n            milestoneByTrack={this.state.milestoneByTrack}\n            focusedTrackId={this.state.focusedTrackId}\n            setFocusedTrackIdFn={this.setFocusedTrackId.bind(this)} />\n        <KeyboardListener\n            selectNextTrackFn={this.shiftFocusedTrack.bind(this, 1)}\n            selectPrevTrackFn={this.shiftFocusedTrack.bind(this, -1)}\n            increaseFocusedMilestoneFn={this.shiftFocusedTrackMilestoneByDelta.bind(this, 1)}\n            decreaseFocusedMilestoneFn={this.shiftFocusedTrackMilestoneByDelta.bind(this, -1)} />\n        <Track\n            milestoneByTrack={this.state.milestoneByTrack}\n            trackId={this.state.focusedTrackId}\n            handleTrackMilestoneChangeFn={(track, milestone) => this.handleTrackMilestoneChange(track, milestone)} />\n        <Footer />\n      </main>\n    )\n  }\n\n  handleTrackMilestoneChange(trackId: TrackId, milestone: Milestone) {\n    const milestoneByTrack = this.state.milestoneByTrack\n    milestoneByTrack[trackId] = milestone\n\n    const titles = eligibleTitles(milestoneByTrack)\n    const title = titles.indexOf(this.state.title) === -1 ? titles[0] : this.state.title\n\n    this.setState({ milestoneByTrack, focusedTrackId: trackId, title })\n  }\n\n  shiftFocusedTrack(delta: number) {\n    let index = trackIds.indexOf(this.state.focusedTrackId)\n    index = (index + delta + trackIds.length) % trackIds.length\n    const focusedTrackId = trackIds[index]\n    this.setState({ focusedTrackId })\n  }\n\n  setFocusedTrackId(trackId: TrackId) {\n    let index = trackIds.indexOf(trackId)\n    const focusedTrackId = trackIds[index]\n    this.setState({ focusedTrackId })\n  }\n\n  shiftFocusedTrackMilestoneByDelta(delta: number) {\n    let prevMilestone = this.state.milestoneByTrack[this.state.focusedTrackId]\n    let milestone = prevMilestone + delta\n    if (milestone < 0) milestone = 0\n    if (milestone > 4) milestone = 4\n    this.handleTrackMilestoneChange(this.state.focusedTrackId, ((milestone: any): Milestone))\n  }\n}\n\nexport default SnowflakeApp\n","// @flow\nimport * as d3 from 'd3'\nimport { tracks, trackIds } from '../constants/tracks'\nimport type { TrackId } from '../constants/tracks'\n\nexport type Score = 0 | 1 | 2 | 3 | 4\nexport const scores = [0, 1, 2, 3, 4]\n\nexport type MilestoneMap = {\n  'KEEP_PROMISES': Milestone,\n  'MEET_DEADLINES': Milestone,\n  'ON_TIME': Milestone,\n  'DEPENDABLE': Milestone,\n  'CONTENT_EXPERTISE': Milestone,\n  'PASSION': Milestone,\n  'CHALLENGE_CUSTOMERS': Milestone,\n  'HUMILITY': Milestone,\n  'ACCEPTANCE': Milestone,\n  'OPENNESS': Milestone,\n  'EMOTIONAL_HONESTY': Milestone,\n  'AUTHENTICITY': Milestone,\n  'FOCUSSING_ON_OTHERS': Milestone,\n  'LISTENING': Milestone,\n  'COMPASSION': Milestone,\n  'COLLABORATION': Milestone\n}\n\nexport type Milestone = {\n  level: Number,\n  description: string,\n  points: Number\n}\n\ntype Milestones = {|\n  0: Milestone,\n  1: Milestone,\n  2: Milestone,\n  3: Milestone,\n  4: Milestone\n|}\n\nexport const milestones: Milestones = {\n  0: { level: 0, description: 'Never', points: 0 },\n  1: { level: 1, description: 'Rarely', points: 1 },\n  2: { level: 2, description: 'Sometimes', points: 2 },\n  3: { level: 3, description: 'Often', points: 3 },\n  4: { level: 4, description: 'Always', points: 4 }\n}\n\nexport const thermometerIncrements = [10, 20, 30, 40, 50, 60, 70, 80, 85, 90, 95, 100]\nexport const maxPoints = 64\n\nexport const categoryIds: Set<string> = trackIds.reduce((set, trackId) => {\n  set.add(tracks[trackId].category)\n  return set\n}, new Set())\n\nexport const categoryPointsFromMilestoneMap = (milestoneMap: MilestoneMap) => {\n  let pointsByCategory = new Map()\n  trackIds.forEach((trackId) => {\n    const milestone = milestoneMap[trackId]\n    const categoryId = tracks[trackId].category\n    let currentPoints = pointsByCategory.get(categoryId) || 0\n    pointsByCategory.set(categoryId, currentPoints + milestones[milestone].points)\n  })\n  return Array.from(categoryIds.values()).map(categoryId => {\n    const points = pointsByCategory.get(categoryId) || 0\n    return { categoryId, points: points }\n  })\n}\n\nexport const totalPointsFromMilestoneMap = (milestoneMap: MilestoneMap): number =>\n  trackIds.map(trackId => milestones[milestoneMap[trackId]].points).reduce((sum, addend) => (sum + addend), 0)\n\nexport const categoryColorScale = d3.scaleOrdinal()\n  .domain(categoryIds)\n  .range(['#47C1BF', '#006FBB', '#EEC200', '#F49342'])\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAlHA;AACA;AAoHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9NA;AACA;AAIA;AAmCA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;;;;A","sourceRoot":""}