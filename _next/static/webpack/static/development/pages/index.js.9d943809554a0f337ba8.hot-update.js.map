{"version":3,"file":"static/webpack/static/development/pages/index.js.9d943809554a0f337ba8.hot-update.js","sources":["webpack:///./components/LevelThermometer.js"],"sourcesContent":["// @flow\n\nimport * as d3 from 'd3'\nimport { pointsToLevels, categoryPointsFromMilestoneMap, categoryColorScale, categoryIds } from '../constants/constants'\nimport React from 'react'\nimport type { MilestoneMap } from '../constants'\n\nconst margins = {\n  top: 30,\n  right: 20,\n  bottom: 30,\n  left: 10\n}\nconst height = 150\nconst width = 550\n\ntype Props = {\n  milestoneByTrack: MilestoneMap,\n}\n\nclass LevelThermometer extends React.Component<Props> {\n  pointScale: any\n  topAxisFn: any\n  bottomAxisFn: any\n  topAxis: *\n  bottomAxis: *\n\n  constructor(props: *) {\n    super(props)\n\n    this.pointScale = d3.scaleLinear()\n      .domain([0, 135])\n      .rangeRound([0, width - margins.left - margins.right]);\n\n    this.topAxisFn = d3.axisTop()\n      .scale(this.pointScale)\n      .tickValues(Object.keys(pointsToLevels))\n      .tickFormat(points => pointsToLevels[points])\n\n    this.bottomAxisFn = d3.axisBottom()\n      .scale(this.pointScale)\n      .tickValues(Object.keys(pointsToLevels) + '')\n  }\n\n  componentDidMount() {\n    d3.select(this.topAxis).call(this.topAxisFn)\n      .selectAll('text')\n      .attr(\"y\", 0)\n      .attr(\"x\", -25)\n      .attr(\"transform\", \"rotate(90)\")\n      .attr(\"dy\", \".35em\")\n      .style('font-size', '12px')\n      .style('text-anchor', 'start')\n    d3.select(this.bottomAxis).call(this.bottomAxisFn)\n      .selectAll('text')\n      .attr(\"y\", 0)\n      .attr(\"x\", 10)\n      .attr(\"transform\", \"rotate(90)\")\n      .attr(\"dy\", \".35em\")\n      .style('font-size', '12px')\n      .style('text-anchor', 'start')\n  }\n\n  rightRoundedRect(x: *, y: *, width: *, height: *, radius: *) {\n    return \"M\" + x + \",\" + y\n         + \"h\" + (width - radius)\n         + \"a\" + radius + \",\" + radius + \" 0 0 1 \" + radius + \",\" + radius\n         + \"v\" + (height - 2 * radius)\n         + \"a\" + radius + \",\" + radius + \" 0 0 1 \" + -radius + \",\" + radius\n         + \"h\" + (radius - width)\n         + \"z\";\n  }\n  render() {\n    let categoryPoints = categoryPointsFromMilestoneMap(this.props.milestoneByTrack)\n    let lastCategoryIndex = 0\n    categoryPoints.forEach((categoryPoint, i) => {\n      if (categoryPoint.points) lastCategoryIndex = i\n    })\n    let cumulativePoints = 0\n    return (\n      <figure>\n        <style jsx>{`\n          figure {\n            margin: 0 0 0 -10px;\n          }\n          svg {\n            width: ${width}px;\n            height: ${height + 10}px;\n          }\n        `}</style>\n        <svg>\n          <g transform={`translate(${margins.left},${margins.top})`}>\n            {categoryPoints.map((categoryPoint, i) => {\n              const x = this.pointScale(cumulativePoints)\n              const width = this.pointScale(cumulativePoints + categoryPoint.points) - x\n              cumulativePoints += categoryPoint.points\n              return (i != lastCategoryIndex ?\n                <rect\n                    key={categoryPoint.categoryId}\n                    x={x}\n                    y={0}\n                    width={width}\n                    height={height - margins.top - margins.bottom}\n                    style={{fill: categoryColorScale(categoryPoint.categoryId), borderRight: \"1px solid #000\"}}\n                    /> :\n                <path\n                    key={categoryPoint.categoryId}\n                    d={this.rightRoundedRect(x, 0, width, height - margins.top - margins.bottom, 3)}\n                    style={{fill: categoryColorScale(categoryPoint.categoryId)}}\n                    />\n              )\n            })}\n            <g ref={ref => this.topAxis = ref} className=\"top-axis\"\n                transform={`translate(0, -2)`}\n                />\n            <g ref={ref => this.bottomAxis = ref} className=\"bottom-axis\"\n                transform={`translate(0,${height - margins.top - margins.bottom + 1})`}\n                />\n          </g>\n        </svg>\n      </figure>\n    )\n  }\n}\n\nexport default LevelThermometer\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAKA;;;;;AAOA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAIA;AAGA;AAAA;AAEA;AAZA;AAeA;AACA;;;AACA;AACA;AAQA;AAQA;;;AAEA;AACA;AAOA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAtGA;AACA;AAwGA;;;;A","sourceRoot":""}