{"version":3,"file":"static/webpack/static/development/pages/index.js.cc2947cb7ca04082b945.hot-update.js","sources":["webpack:///./components/NightingaleChart.js"],"sourcesContent":["// @flow\n\nimport React from 'react'\nimport * as d3 from 'd3'\nimport { scores, categoryColorScale } from '../constants/constants'\nimport type { Milestone, MilestoneMap } from '../constants/constants'\nimport { trackIds, tracks } from '../constants/tracks'\nimport type { TrackId } from '../constants/tracks'\n\nconst width = 400\nconst arcMilestones = scores.slice(1) // we'll draw the '0' milestone with a circle, not an arc.\n\ntype Props = {\n  milestoneByTrack: MilestoneMap,\n  focusedTrackId: TrackId,\n  handleTrackMilestoneChangeFn: (TrackId, Milestone) => void\n}\n\nclass NightingaleChart extends React.Component<Props> {\n  colorScale: any\n  radiusScale: any\n  arcFn: any\n\n  constructor(props: *) {\n    super(props)\n\n    this.colorScale = d3.scaleSequential(d3.interpolateWarm)\n      .domain([0, 5])\n\n    this.radiusScale = d3.scaleBand()\n      .domain(arcMilestones)\n      .range([.15 * width, .45 * width])\n      .paddingInner(0.1)\n\n    this.arcFn = d3.arc()\n      .innerRadius(milestone => this.radiusScale(milestone))\n      .outerRadius(milestone => this.radiusScale(milestone) + this.radiusScale.bandwidth())\n      .startAngle(- Math.PI / trackIds.length)\n      .endAngle(Math.PI / trackIds.length)\n      .padAngle(Math.PI / 200)\n      .padRadius(.45 * width)\n      .cornerRadius(2)\n  }\n\n  render() {\n    const currentMilestoneId = this.props.milestoneByTrack[this.props.focusedTrackId]\n    return (\n      <figure>\n        <style jsx>{`\n          figure {\n            margin: 0;\n          }\n          svg {\n            width: ${width}px;\n            height: ${width}px;\n          }\n          .track-milestone {\n            fill: #eee;\n            cursor: pointer;\n          }\n          .track-milestone-current, .track-milestone:hover {\n            stroke: #000;\n            stroke-width: 4px;\n            stroke-linejoin: round;\n          }\n        `}</style>\n        <svg>\n          <g transform={`translate(${width/2},${width/2}) rotate(-33.75)`}>\n            {trackIds.map((trackId, i) => {\n              const isCurrentTrack = trackId == this.props.focusedTrackId\n              return (\n                <g key={trackId} transform={`rotate(${i * 360 / trackIds.length})`}>\n                  {arcMilestones.map((milestone) => {\n                    const isCurrentMilestone = isCurrentTrack && milestone == currentMilestoneId\n                    const isMet = this.props.milestoneByTrack[trackId] >= milestone || milestone == 0\n                    return (\n                      <path\n                          key={milestone}\n                          className={'track-milestone ' + (isMet ? 'is-met ' : ' ') + (isCurrentMilestone ? 'track-milestone-current' : '')}\n                          onClick={() => this.props.handleTrackMilestoneChangeFn(trackId, milestone)}\n                          d={this.arcFn(milestone)}\n                          style={{fill: isMet ? categoryColorScale(tracks[trackId].category) : undefined}} />\n                    )\n                  })}\n                  <circle\n                      r=\"8\"\n                      cx=\"0\"\n                      cy=\"-50\"\n                      style={{fill: categoryColorScale(tracks[trackId].category)}}\n                      className={\"track-milestone \" + (isCurrentTrack && !currentMilestoneId ? \"track-milestone-current\" : \"\")}\n                      onClick={() => this.props.handleTrackMilestoneChangeFn(trackId, 0)} />\n                </g>\n            )})}\n          </g>\n        </svg>\n      </figure>\n    )\n  }\n}\n\nexport default NightingaleChart\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAOA;;;;;AAKA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAGA;AAKA;AACA;AAAA;AACA;AAAA;AAbA;AAmBA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAKA;;;;AA/EA;AACA;AAiFA;;;;A","sourceRoot":""}